{
  "version": 3,
  "file": "impl.js",
  "sourceRoot": "/Users/Sergey/Work/EXP/mioc/test",
  "sources": [
    "impl.ts"
  ],
  "names": [],
  "mappings": ";;IAGA;QAEW,gCAAU,GAAjB,UAAkB,OAAW;YACzB,IAAI,CAAC,OAAO,GAAC,OAAO,CAAC;YACrB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QACL,kBAAC;QAND;QAMA,CAAC;IAAD,CAAC,AAND,IAMC;;IAND,yCAMC,CAAA;IAGD;QACW,uBAAE,GAAT,UAAU,MAAc;YACpB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;gBACnB,EAAE,EAAY,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACxC,IAAI,EAAU,MAAM,CAAC,IAAI;gBACzB,UAAU,EAAI,MAAM,CAAC,UAAU;gBAC/B,MAAM,EAAQ,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,EAAC,CAAC,IAAG,OAAA,CAAC,CAAC,GAAC,CAAC,CAAC,EAAL,CAAK,EAAC,IAAI,CAAC,OAAO,CAAC;aACpE,CAAC,CAAA;QACN,CAAC;;;;;;;;;8DATL;gBAAA,CAAC,kBAAU,CAAA;YAAA;gBAC4C,qBAAc;;;QASrE,iBAAC;QATD;YAAgC,+BAAW;QAS3C,CAAC;IAAD,CAAC,AATD,IASC;;IATD,uCASC,CAAA;IAGD;QACW,uBAAE,GAAT,UAAU,MAAc;YACpB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;gBACnB,EAAE,EAAY,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACxC,IAAI,EAAU,MAAM,CAAC,IAAI;gBACzB,UAAU,EAAI,MAAM,CAAC,UAAU;gBAC/B,MAAM,EAAQ,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,EAAC,CAAC,IAAG,OAAA,CAAC,CAAC,GAAC,CAAC,CAAC,EAAL,CAAK,EAAC,IAAI,CAAC,OAAO,CAAC;aACpE,CAAC,CAAA;QACN,CAAC;;;;;;;;;8DATL;gBAAA,CAAC,kBAAU,CAAA;YAAA;gBAC4C,qBAAc;;;QASrE,iBAAC;QATD;YAAgC,+BAAW;QAS3C,CAAC;IAAD,CAAC,AATD,IASC;;IATD,uCASC,CAAA;IAGD;QAYW,yBAAK,GAAZ,UAAa,OAAO;YAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAE,OAAA,CAAC,CAAC,EAAE,CAAC;gBACjD,IAAI,EAAU,MAAM;gBACpB,UAAU,EAAI,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;aAC9B,CAAC,EAH8C,CAG9C,CAAC,CAAC;QACR,CAAC;;oEARD;gBAAA,CAAC,cAAM,CAAA;YAAA;;;;;;4DAVX;gBAAA,CAAC,kBAAU,CAAA;YAAA;;QAmBX,gBAAC;QAhBG;YACI,EAAE,CAAA,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA,CAAC;gBACrB,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC;YAC5B,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,SAAS,CAAC,SAAS,EAAE,CAAC;YAC1B,CAAC;QACL,CAAC;IAUL,CAAC,AAlBD,IAkBC;;IAlBD,qCAkBC,CAAA;;;;;;;;;;YAnDD,0BAAA,WAMC;YAGD,yBAAA,WAAgC,WAS/B;YAGD,yBAAA,WAAgC,WAS/B;YAGD,wBAAA,SAkBC",
  "sourcesContent": [
    "import {IService, IActionService, IAction, IResult} from \"./intf\";\nimport {Inject,Injectable} from \"mioc/index\";\n\nexport class CalcService implements IService {\n    protected initial:number;\n    public initialize(options:any):Promise<this>{\n        this.initial=options;\n        return Promise.resolve(this);\n    }\n}\n\n@Injectable\nexport class SumService extends CalcService implements IActionService {\n    public do(action:IAction):Promise<IResult>{\n        return Promise.resolve({\n            id          : Math.random().toString(16),\n            type        : action.type,\n            parameters  : action.parameters,\n            result      : action.parameters.reduce((c,p)=>(c+p),this.initial)\n        })\n    }\n}\n\n@Injectable\nexport class MulService extends CalcService implements IActionService {\n    public do(action:IAction):Promise<IResult>{\n        return Promise.resolve({\n            id          : Math.random().toString(16),\n            type        : action.type,\n            parameters  : action.parameters,\n            result      : action.parameters.reduce((c,p)=>(c*p),this.initial)\n        })\n    }\n}\n\n@Injectable\nexport class Bootstrap {\n    public static instances:number;\n    constructor(){\n        if(!Bootstrap.instances){\n            Bootstrap.instances = 1;\n        }else{\n            Bootstrap.instances++;\n        }\n    }\n    @Inject\n    private service:IActionService;\n\n    public start(initial):Promise<IResult>{\n        return this.service.initialize(initial).then(s=>s.do({\n            type        : 'calc',\n            parameters  : [1,2,3,4,5,6]\n        }));\n    }\n}\n\n"
  ]
}